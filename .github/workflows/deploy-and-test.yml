name: CI Test on AWS EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout including submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up SSH Key from base64
      run: |
        printf "%s" "${{ secrets.AWS_EC2_KEY_B64 }}" | base64 -d > key.pem
        chmod 600 key.pem

    - name: Deploy Environment
      run: |
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          if [ ! -f ~/.auriga_env_configured ]; then
            echo "alias python=/usr/bin/python3.12" >> ~/.profile
            echo "alias pip=/home/ubuntu/.local/bin/pip" >> ~/.profile
            source .profile
            sudo mv /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.old
            wget -O get-pip.py https://bootstrap.pypa.io/get-pip.py 
            python get-pip.py
            touch ~/.auriga_env_configured
            echo "✔️ Environment configured."
          else
            echo "ℹ️ Environment already configured. Skipping alias setup."
          fi
        EOF

    - name: Copy project to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i key.pem -r "Trading-Automation" \
        ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:~/
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          
          
          cd Trading-Automation
          pip install -r requirements.txt
        EOF
 
    - name: Deploy Service
      run: |
        scp -o StrictHostKeyChecking=no -i key.pem trading.service ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:~/
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          sudo mv ~/trading.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable trading.service
        EOF
    - name: Run trading_automation.py on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          cd ~/Trading-Automation
          python3 -m pip install -r requirements.txt || true
          nohup python trading_automation.py > output.log 2>&1 &
          sleep 10
          tail -n 20 output.log
        EOF

    - name: Restart trading service on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          sudo systemctl daemon-reload
          sudo systemctl restart trading.service
          sudo systemctl status trading.service --no-pager
        EOF
        